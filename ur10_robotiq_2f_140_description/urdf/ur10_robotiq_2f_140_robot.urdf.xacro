<?xml version="1.0"?>
<robot xmlns:xacro="http://wiki.ros.org/xacro"
	   name="ur10_robotiq_2f_140">

    <!-- Specifies simulated hardware interface used by gazebo.
		 Although the real hardware uses a position joint interface, it makes more sense to
		 use the 'EffortJointInterface' for simulation. 
		 This is because when using the 'PositionJointInterface', gazebo uses 
		 the Joint.SetPosition() method which forces the simulation to adapt the specified joint
		 position and may lead to weird behaviors in collisions.
		 Note that, when using the 'EffortJointInterface', you also have to specify
		a 'effort_controllers/JointTrajectoryController' controller which requires to set PID gains.
     -->
    <xacro:arg name="arm_transmission_hw_interface" default="hardware_interface/PositionJointInterface"/>
	<xacro:arg name="gripper_transmission_hw_interface" default="hardware_interface/PositionJointInterface"/>

    <!-- MoveIt! seems to have difficulties with finding plans for the UR with full joint limits [-2pi, 2pi]. 
         The limited version uses joint limits restricted to [-pi,pi].
    -->
    <xacro:arg name="limited" default="false"/>

	<xacro:include filename="$(find ur10_robotiq_2f_140_description)/urdf/ur10_robotiq_2f_140.urdf.xacro" />

	<!-- universal robot UR10 with Robotiq 2f 140 gripper -->
	<xacro:ur10_robotiq_2f_140_robot prefix="" joint_limited="$(arg limited)" 
		arm_transmission_hw_interface="$(arg arm_transmission_hw_interface)" 
		gripper_transmission_hw_interface="$(arg gripper_transmission_hw_interface)" 
	/>

	<!-- used for fixing robot to Gazebo 'base_link' -->
	<link name="world" />

	<!-- attach ur10 to world frame -->
	<joint name="world_joint" type="fixed">
		<parent link="world" />
		<child link = "base_link" />
		<origin xyz="0 0 0" rpy="0 0 0" />
	</joint>

	<!-- load ros_control gazebo plugin -->
	<gazebo>
    	<plugin name="ros_control" filename="libgazebo_ros_control.so" />
	</gazebo>
		
</robot>